generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id
  tenants             UserTenant[]
  ServiceCallFavorite ServiceCallFavorite[]
}

model Tenant {
  id          String        @id
  users       UserTenant[]
  ServiceCall ServiceCall[]
}

model UserTenant {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String
  userId   String

  @@unique([userId, tenantId])
}

enum ServiceCallStatus {
  PENDING
  EXECUTED
  FAILED
}

enum Protocol {
  HTTP
}

model ServiceCall {
  id                  Int                     @id @default(autoincrement())
  tenantId            String
  tenant              Tenant                  @relation(fields: [tenantId], references: [id])
  name                String
  status              ServiceCallStatus       @default(PENDING)
  protocol            Protocol
  submittedAt         DateTime                @default(now())
  executedAt          DateTime?
  scheduledAt         DateTime?
  serviceCallFavorite ServiceCallFavorite[]
  httpDetails         HttpServiceCallDetails?
}

model ServiceCallFavorite {
  id            Int         @id @default(autoincrement())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceCallId Int
  serviceCall   ServiceCall @relation(fields: [serviceCallId], references: [id])

  @@unique([userId, serviceCallId])
}

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  HEAD
  OPTIONS
}

model HttpServiceCallDetails {
  id              Int         @id @default(autoincrement())
  serviceCallId   Int         @unique
  serviceCall     ServiceCall @relation(fields: [serviceCallId], references: [id])
  url             String
  method          HttpMethod
  requestBody     String?
  requestHeaders  Json?
  responseCode    Int?
  responseBody    String?
  responseHeaders Json?
}
